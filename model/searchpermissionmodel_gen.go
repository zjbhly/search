// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	searchPermissionFieldNames          = builder.RawFieldNames(&SearchPermission{})
	searchPermissionRows                = strings.Join(searchPermissionFieldNames, ",")
	searchPermissionRowsExpectAutoSet   = strings.Join(stringx.Remove(searchPermissionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	searchPermissionRowsWithPlaceHolder = strings.Join(stringx.Remove(searchPermissionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	searchPermissionModel interface {
		Insert(ctx context.Context, data *SearchPermission) (sql.Result, error)
		FindOne(ctx context.Context, address string) (*SearchPermission, error)
		Update(ctx context.Context, data *SearchPermission) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSearchPermissionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SearchPermission struct {
		Id             int64        `db:"id"`
		Address        string       `db:"address"`
		TwitterAddress string       `db:"twitter_address"`
		Permission     int64        `db:"permission"`
		CreateTime     sql.NullTime `db:"create_time"`
		ModifiedTime   sql.NullTime `db:"modified_time"`
	}
)

func newSearchPermissionModel(conn sqlx.SqlConn) *defaultSearchPermissionModel {
	return &defaultSearchPermissionModel{
		conn:  conn,
		table: "`search_permission`",
	}
}

func (m *defaultSearchPermissionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}
//根据address字段查询permission字段
func (m *defaultSearchPermissionModel) FindOne(ctx context.Context, address string) (*SearchPermission, error) {
	query := fmt.Sprintf("select %s from %s where `address` = ?", searchPermissionFieldNames[3], m.table)
	var resp SearchPermission
	err := m.conn.QueryRowCtx(ctx, &resp.Permission, query, address)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

/*func (m *defaultSearchPermissionModel) FindOne(ctx context.Context, id int64) (*SearchPermission, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", searchPermissionRows, m.table)
	var resp SearchPermission
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
*/

func (m *defaultSearchPermissionModel) Insert(ctx context.Context, data *SearchPermission) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, searchPermissionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Address, data.TwitterAddress, data.Permission, data.ModifiedTime)
	return ret, err
}

func (m *defaultSearchPermissionModel) Update(ctx context.Context, data *SearchPermission) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, searchPermissionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Address, data.TwitterAddress, data.Permission, data.ModifiedTime, data.Id)
	return err
}

func (m *defaultSearchPermissionModel) tableName() string {
	return m.table
}
